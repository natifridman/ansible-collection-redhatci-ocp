#! /bin/bash

set -e

{% if create_vms_disable_secure_boot %}
# Copy VARS.fd file related to non secure boot mode if that's the case
cp {{ create_vms_non_secure_ovmf_vars_path }} {{ create_vms_ovmf_vars_path }}
{% endif %}

virt-install \
    --virt-type=kvm \
    --name "{{ item.name }}" \
    {% if item.uuid | trim | length > 0 %}
    --uuid="{{ item.uuid }}" \
    {% endif %}
    --memory {{ item.memory }} \
    --vcpus={{ item.vcpu }} \
    --os-variant=rhel8.3 \
    --os-type linux \
    {# For backward compatibility, check if network_interfaces exists #}
    {% if item.network_interfaces is defined %}
    {% for bridge, mac in item.network_interfaces.items() %}
    --network=bridge:{{ bridge }},mac="{{ mac }}" \
    {% endfor %}
    {% else %}
    {# Default network for backward compatibility #}
    --network=network:{{ network_name }}{% if item.mac_address is defined %},mac="{{ item.mac_address }}"{% endif %} \
    {% if create_vms_additional_networks | length > 0 %}
    {% for net in create_vms_additional_networks %}
    --network=network:{{ net.name }} \
    {% endfor %}
    {% endif %}
    {% endif %}
    {% for disk_name, disk_size in item.disks.items() %}
    --disk path={{ images_dir }}/{{ item.name }}_{{ disk_name }}.qcow2,size={{ disk_size }},format=qcow2 \
    {% endfor %}
    --graphics vnc \
    --noautoconsole \
    --wait=-1 \
    {% if not is_on_rhel9 %}
    {% if create_vms_disable_secure_boot %}
    --boot loader={{ create_vms_x86_64_ovmf_code_path }},loader.readonly=yes,loader.secure='no',loader.type=pflash,nvram={{ create_vms_ovmf_vars_path }} \
    {% else %}
    --boot loader={{ create_vms_x86_64_ovmf_code_path }},loader.readonly=yes,loader.secure='yes',loader.type=pflash,nvram={{ create_vms_ovmf_vars_path }},nvram.template={{ create_vms_secure_ovmf_vars_path }} \
    --features smm=on \
    {% endif %}
    {% endif %}
    {% if additional_virt_install_options is defined %}
    {{ additional_virt_install_options }}
    {% endif %}
    --events on_reboot=restart \
    --autostart \
    --print-xml > /tmp/{{item.name}}.xml

virsh define --file /tmp/{{item.name}}.xml

virsh detach-device {{ item.name }} /tmp/{{ cluster_name }}_rng_device.xml --config
